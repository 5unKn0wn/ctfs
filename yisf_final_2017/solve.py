from z3 import *

with open("index_table1", "rb") as f:
	data = f.read()

index_table1 = []
for i in range(9):
	arr_i = []
	for j in range(16):
		arr_j = []
		for k in range(256):
			arr_j.append(ord(data[(i * 16 * 256) + (j * 256) + k]))
		arr_i.append(arr_j)
	index_table1.append(arr_i)

with open("index_table2", "rb") as f:
	data = f.read()

index_table2 = []
for i in range(16):
	arr_i = []
	for j in range(256):
		arr_i.append(ord(data[(i * 256) + j]))
	index_table2.append(arr_i)

with open("table1", "rb") as f:
	data = f.read()

table1 = []
for i in range(4):
	arr_i = []
	for j in range(256):
		arr_j = []
		for k in range(4):
			arr_j.append(ord(data[(i * 256 * 4) + (j * 4) + k]))
		arr_i.append(arr_j)
	table1.append(arr_i)

table2 = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x00, 0x03, 0x02, 0x05, 0x04, 0x07, 0x06, 0x09, 0x08, 0x0B, 0x0A, 0x0D, 0x0C, 0x0F, 0x0E, 0x02, 0x03, 0x00, 0x01, 0x06, 0x07, 0x04, 0x05, 0x0A, 0x0B, 0x08, 0x09, 0x0E, 0x0F, 0x0C, 0x0D, 0x03, 0x02, 0x01, 0x00, 0x07, 0x06, 0x05, 0x04, 0x0B, 0x0A, 0x09, 0x08, 0x0F, 0x0E, 0x0D, 0x0C, 0x04, 0x05, 0x06, 0x07, 0x00, 0x01, 0x02, 0x03, 0x0C, 0x0D, 0x0E, 0x0F, 0x08, 0x09, 0x0A, 0x0B, 0x05, 0x04, 0x07, 0x06, 0x01, 0x00, 0x03, 0x02, 0x0D, 0x0C, 0x0F, 0x0E, 0x09, 0x08, 0x0B, 0x0A, 0x06, 0x07, 0x04, 0x05, 0x02, 0x03, 0x00, 0x01, 0x0E, 0x0F, 0x0C, 0x0D, 0x0A, 0x0B, 0x08, 0x09, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x09, 0x08, 0x0B, 0x0A, 0x0D, 0x0C, 0x0F, 0x0E, 0x01, 0x00, 0x03, 0x02, 0x05, 0x04, 0x07, 0x06, 0x0A, 0x0B, 0x08, 0x09, 0x0E, 0x0F, 0x0C, 0x0D, 0x02, 0x03, 0x00, 0x01, 0x06, 0x07, 0x04, 0x05, 0x0B, 0x0A, 0x09, 0x08, 0x0F, 0x0E, 0x0D, 0x0C, 0x03, 0x02, 0x01, 0x00, 0x07, 0x06, 0x05, 0x04, 0x0C, 0x0D, 0x0E, 0x0F, 0x08, 0x09, 0x0A, 0x0B, 0x04, 0x05, 0x06, 0x07, 0x00, 0x01, 0x02, 0x03, 0x0D, 0x0C, 0x0F, 0x0E, 0x09, 0x08, 0x0B, 0x0A, 0x05, 0x04, 0x07, 0x06, 0x01, 0x00, 0x03, 0x02, 0x0E, 0x0F, 0x0C, 0x0D, 0x0A, 0x0B, 0x08, 0x09, 0x06, 0x07, 0x04, 0x05, 0x02, 0x03, 0x00, 0x01, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00]
table3 = [0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0x10, 0x00, 0x30, 0x20, 0x50, 0x40, 0x70, 0x60, 0x90, 0x80, 0xB0, 0xA0, 0xD0, 0xC0, 0xF0, 0xE0, 0x20, 0x30, 0x00, 0x10, 0x60, 0x70, 0x40, 0x50, 0xA0, 0xB0, 0x80, 0x90, 0xE0, 0xF0, 0xC0, 0xD0, 0x30, 0x20, 0x10, 0x00, 0x70, 0x60, 0x50, 0x40, 0xB0, 0xA0, 0x90, 0x80, 0xF0, 0xE0, 0xD0, 0xC0, 0x40, 0x50, 0x60, 0x70, 0x00, 0x10, 0x20, 0x30, 0xC0, 0xD0, 0xE0, 0xF0, 0x80, 0x90, 0xA0, 0xB0, 0x50, 0x40, 0x70, 0x60, 0x10, 0x00, 0x30, 0x20, 0xD0, 0xC0, 0xF0, 0xE0, 0x90, 0x80, 0xB0, 0xA0, 0x60, 0x70, 0x40, 0x50, 0x20, 0x30, 0x00, 0x10, 0xE0, 0xF0, 0xC0, 0xD0, 0xA0, 0xB0, 0x80, 0x90, 0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00, 0xF0, 0xE0, 0xD0, 0xC0, 0xB0, 0xA0, 0x90, 0x80, 0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x90, 0x80, 0xB0, 0xA0, 0xD0, 0xC0, 0xF0, 0xE0, 0x10, 0x00, 0x30, 0x20, 0x50, 0x40, 0x70, 0x60, 0xA0, 0xB0, 0x80, 0x90, 0xE0, 0xF0, 0xC0, 0xD0, 0x20, 0x30, 0x00, 0x10, 0x60, 0x70, 0x40, 0x50, 0xB0, 0xA0, 0x90, 0x80, 0xF0, 0xE0, 0xD0, 0xC0, 0x30, 0x20, 0x10, 0x00, 0x70, 0x60, 0x50, 0x40, 0xC0, 0xD0, 0xE0, 0xF0, 0x80, 0x90, 0xA0, 0xB0, 0x40, 0x50, 0x60, 0x70, 0x00, 0x10, 0x20, 0x30, 0xD0, 0xC0, 0xF0, 0xE0, 0x90, 0x80, 0xB0, 0xA0, 0x50, 0x40, 0x70, 0x60, 0x10, 0x00, 0x30, 0x20, 0xE0, 0xF0, 0xC0, 0xD0, 0xA0, 0xB0, 0x80, 0x90, 0x60, 0x70, 0x40, 0x50, 0x20, 0x30, 0x00, 0x10, 0xF0, 0xE0, 0xD0, 0xC0, 0xB0, 0xA0, 0x90, 0x80, 0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00]

def mutate(plain):
	v2 = plain[1]
	plain[1] = plain[5]
	plain[5] = plain[9]
	plain[9] = plain[13]
	plain[13] = v2
	v3 = plain[2]
	plain[2] = plain[10]
	plain[10] = v3
	v4 = plain[6]
	plain[6] = plain[14]
	plain[14] = v4
	v5 = plain[15]
	plain[15] = plain[11]
	plain[11] = plain[7]
	plain[7] = plain[3]
	plain[3] = v5

	return plain

def mutate_rev(cipher):
	v5 = cipher[3]
	cipher[3] = cipher[7]
	cipher[7] = cipher[11]
	cipher[11] = cipher[15]
	cipher[15] = v5
	v4 = cipher[14]
	cipher[14] = cipher[6]
	cipher[6] = v4
	v3 = cipher[10]
	cipher[10] = cipher[2]
	cipher[2] = v3
	v2 = cipher[13]
	cipher[13] = cipher[9]
	cipher[9] = cipher[5]
	cipher[5] = cipher[1]
	cipher[1] = v2

	return cipher

def add(arr1, arr2):
	res = []
	for i in range(4):
		res.append(table2[((arr1[i] & 0xf0) + ((arr2[i] & 0xf0) >> 4)) & 0xff] + table3[((arr1[i] << 4) + (arr2[i] & 0xF)) & 0xff])
	return res


# buf = bytearray("YISF{ABCDEFGHIJ}")
enc_flag = "\xC9\x4B\xF8\x19\x1C\x16\x60\x1A\x98\x30\x98\xED\xAB\xC0\xB4\x68"
s = Solver()
buf = [BitVec("buf_%d" % i, 8) for i in range(16)]

for i in range(1, 10):
	buf = mutate(buf)
	for j in range(16):
                tmp = buf[j]
                print tmp
		buf[j] = index_table1[i - 1][j][tmp]
	for j in range(4):
		v16 = [[], [], [], []]
		for k in range(4):
			for l in range(4):
				v16[k].append(table1[k][buf[j * 4 + k]][l])
		v13_1 = add(v16[0], v16[1])
		v13_2 = add(v16[2], v16[3])
		tmp = add(v13_1, v13_2)
		buf[4 * j] = tmp[0]
		buf[4 * j + 1] = tmp[1]
		buf[4 * j + 2] = tmp[2]
		buf[4 * j + 3] = tmp[3]

buf = mutate(buf)
for i in range(16):
	buf[i] = index_table2[i][buf[i]]

# print str(buf).encode('hex')

for i in range(16):
	s.add(buf[i] == ord(enc_flag[i]))

s.check()
print s.model()












