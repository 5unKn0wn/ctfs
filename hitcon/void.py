sbox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
        0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 
        0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 
        0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 
        0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 
        0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 
        0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 
        0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 
        0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 
        0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 
        0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 
        0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 
        0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 
        0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 
        0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 
        0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 
        0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]

invsbox = []
for i in range(256):
    invsbox.append(sbox.index(i))

def InvSubBytes(state):
    state = [list(c) for c in state]
    for i in range(len(state)):
        row = state[i]
        for j in range(len(row)):
            state[i][j] = invsbox[state[i][j]]
    return state

def rowsToCols(state):
    cols = []
    
    cols.append([state[0][0], state[1][0], state[2][0], state[3][0]])
    cols.append([state[0][1], state[1][1], state[2][1], state[3][1]])
    cols.append([state[0][2], state[1][2], state[2][2], state[3][2]])
    cols.append([state[0][3], state[1][3], state[2][3], state[3][3]])
    
    return cols

def colsToRows(state):
    rows = []
    
    rows.append([state[0][0], state[1][0], state[2][0], state[3][0]])
    rows.append([state[0][1], state[1][1], state[2][1], state[3][1]])
    rows.append([state[0][2], state[1][2], state[2][2], state[3][2]])
    rows.append([state[0][3], state[1][3], state[2][3], state[3][3]])
    
    return rows

def InvShiftrows(state):
    state = colsToRows(state)

    state[1].insert(0,state[1].pop())
    
    state[2].insert(0,state[2].pop())
    state[2].insert(0,state[2].pop())
    
    state[3].insert(0,state[3].pop())
    state[3].insert(0,state[3].pop())
    state[3].insert(0,state[3].pop())
    
    return rowsToCols(state)    

def galoisMult(a, b):
    p = 0
    hiBitSet = 0
    for i in range(8):
        if b & 1 == 1:
            p ^= a
        hiBitSet = a & 0x80
        a <<= 1
        if hiBitSet == 0x80:
            a ^= 0x1b
        b >>= 1
    return p % 256

def mixColumnInv(column):
    temp = []
    for i in range(len(column)):
        temp.append(column[i])
    
    column[0] = galoisMult(temp[0],0xE) ^ galoisMult(temp[3],0x9) ^ galoisMult(temp[2],0xD) ^ galoisMult(temp[1],0xB)
    column[1] = galoisMult(temp[1],0xE) ^ galoisMult(temp[0],0x9) ^ galoisMult(temp[3],0xD) ^ galoisMult(temp[2],0xB)
    column[2] = galoisMult(temp[2],0xE) ^ galoisMult(temp[1],0x9) ^ galoisMult(temp[0],0xD) ^ galoisMult(temp[3],0xB)
    column[3] = galoisMult(temp[3],0xE) ^ galoisMult(temp[2],0x9) ^ galoisMult(temp[1],0xD) ^ galoisMult(temp[0],0xB)    
                
    return column

def InvMixColumns(cols):
    r = [0,0,0,0]
    for i in range(len(cols)):
        r[i] = mixColumnInv(cols[i])

    return r
    
def AddRoundKey(s,ks,r):
    for i in range(len(s)):
        for j in range(len(s[i])):
            s[i][j] = s[i][j] ^ ks[r*4+i][j]

    return s

def oneRoundDecrypt(s, ks, r):
    s = AddRoundKey(s,ks,r)
    s = InvMixColumns(s)
    s = InvShiftrows(s)
    s = InvSubBytes(s)
    return s

def finalRoundDecrypt(s, ks, r):
    s = AddRoundKey(s,ks,r)
    s = InvShiftrows(s)
    s = InvSubBytes(s)
    return s

def decrypt10rounds(message, key):
    s = []
    
    s.append(message[:4])
    s.append(message[4:8])
    s.append(message[8:12])
    s.append(message[12:16])
    
    s = finalRoundDecrypt(s, key, 9)
    s = oneRoundDecrypt(s, key, 8)
    s = oneRoundDecrypt(s, key, 7)
    s = oneRoundDecrypt(s, key, 6)
    s = oneRoundDecrypt(s, key, 5)
    s = oneRoundDecrypt(s, key, 4)
    s = oneRoundDecrypt(s, key, 3)
    s = oneRoundDecrypt(s, key, 2)
    s = oneRoundDecrypt(s, key, 1)
    s = oneRoundDecrypt(s, key, 0)

    res = []
    for i in range(len(s)):
        for j in range(len(s[i])):
            res.append(s[i][j])
    
    return res

enc = [0xE7, 0x47, 0x04, 0x12, 0x49, 0x6D, 0xCF, 0x47, 0xB0, 0xE9, 0x1B, 0x17, 0x67, 0xFB, 0x46, 0x28]
key = [[0x0F, 0x1F, 0x84, 0x00], [0x00, 0x00, 0x00, 0x00], [0x4C, 0x89, 0xEA, 0x4C], [0x89, 0xF6, 0x44, 0x89], [0xFF, 0x41, 0xFF, 0x14], [0xDC, 0x48, 0x83, 0xC3], [0x01, 0x48, 0x39, 0xDD], [0x75, 0xEA, 0x48, 0x83], [0xC4, 0x08, 0x5B, 0x5D], [0x41, 0x5C, 0x41, 0x5D], [0x41, 0x5E, 0x41, 0x5F], [0xC3, 0x90, 0x66, 0x2E], [0x0F, 0x1F, 0x84, 0x00], [0x00, 0x00, 0x00, 0x00], [0xF3, 0xC3, 0x00, 0x00], [0x48, 0x83, 0xEC, 0x08], [0x48, 0x83, 0xC4, 0x08], [0xC3, 0x00, 0x00, 0x00], [0x01, 0x00, 0x02, 0x00], [0x25, 0x73, 0x00, 0x68], [0x69, 0x74, 0x63, 0x6F], [0x6E, 0x7B, 0x25, 0x73], [0x7D, 0x0A, 0x00, 0x00], [0x01, 0x1B, 0x03, 0x3B], [0x40, 0x00, 0x00, 0x00], [0x07, 0x00, 0x00, 0x00], [0xBC, 0xFD, 0xFF, 0xFF], [0x8C, 0x00, 0x00, 0x00], [0xCC, 0xFD, 0xFF, 0xFF], [0xB4, 0x00, 0x00, 0x00], [0xEC, 0xFD, 0xFF, 0xFF], [0x5C, 0x00, 0x00, 0x00], [0x1C, 0xFF, 0xFF, 0xFF], [0xCC, 0x00, 0x00, 0x00], [0x57, 0xFF, 0xFF, 0xFF], [0xEC, 0x00, 0x00, 0x00], [0x6C, 0xFF, 0xFF, 0xFF], [0x0C, 0x01, 0x00, 0x00], [0xDC, 0xFF, 0xFF, 0xFF], [0x54, 0x01, 0x00, 0x00]]
xor = [0x48, 0xC1, 0xFD, 0x03, 0xE8, 0x07, 0xFE, 0xFF, 0xFF, 0x48, 0x85, 0xED, 0x74, 0x20, 0x31, 0xDB]
flag = decrypt10rounds(enc, key)
flag = ''.join(chr(flag[i] ^ xor[i]) for i in range(16))

print "hitcon{" + flag + "}"
