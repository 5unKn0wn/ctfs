def KSA(key):
    keylength = len(key)
    S = range(256)
    j = 0

    for i in range(256):
        j = (j + S[i] + key[i % keylength]) % 256
        S[i], S[j] = S[j], S[i]  # swap

    return S

def PRGA(S):
    i = 0
    j = 0
    while True:
        i = (i + 1) % 256
        j = (j + S[i]) % 256
        S[i], S[j] = S[j], S[i]  # swap
        K = S[(S[i] + S[j]) % 256]
        yield K

def RC4(key):
    S = KSA(key)
    return PRGA(S)

key = bytearray("This is not the key")
plaintext = [0xf6, 0xcc, 0x4a, 0x49, 0x46, 0x87, 0xb, 0x74, 0xc, 0x51, 0xa, 0x7, 0x91, 0xe4, 0xc8, 0xe3, 0x1, 0xb, 0xf2, 0x7f, 0xb, 0x20, 0x57, 0x7b, 0xa7, 0xa8, 0x9a, 0xf2, 0x75, 0x98, 0xbe, 0x61, 0xa6, 0x7, 0xd5, 0x68, 0xed, 0x97, 0x0, 0x99, 0x70, 0x93, 0xe, 0x14, 0xfc, 0x93, 0x17, 0x70, 0xbc, 0x9d, 0x7e, 0x78, 0xdf, 0xec, 0xc7, 0xd9, 0x2c, 0xe5, 0x24, 0x6b, 0x6d, 0xa9, 0xbe, 0x56]
for i in range(0x400):
    keystream = RC4(key)
    for j in range(len(key)):
        c = keystream.next()
        key[j] ^= c

keystream = RC4(key)
for i in range(len(plaintext)):
    c = keystream.next()
    plaintext[i] ^= c

n2ch = ''.join(chr(i) for i in plaintext)
ch2n = dict(zip(n2ch, range(len(n2ch))))

def separate(seq, size):
    return (seq[i:i+size] for i in range(0, len(seq), size))

def base64_encode(data):
    buf = ""
    rem = len(data) % 3
    pad = 3 - rem
    if rem > 0: data = data + "\0" * pad
    for i in range(0, len(data), 3):
        b3 = (ord(data[i]) << 16) | (ord(data[i + 1]) << 8) | ord(data[i + 2])
        buf += n2ch[b3 >> 18] + n2ch[(b3 >> 12) & 0x3f]
        buf += n2ch[(b3 >> 6) & 0x3f] + n2ch[b3 & 0x3f]
        pass
    if rem > 0: buf = buf[:-pad] + "=" * pad
    return buf

sbox = [0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x7b, 0x7c, 0x7d, 0x7e, 0x20, 0x9, 0xa, 0xd, 0xb, 0xc]
table = [[0x5fbce0, 0x52, 0x6, 0x1, 0x0], [0x5fc540, 0x2e, 0x1f, 0x0, 0x5fbce0], [0x5fc8e0, 0x35, 0x28, 0x0, 0x5fbce0], [0x5fbe60, 0xf, 0xa, 0x0, 0x5fbce0], [0x5fc200, 0x2, 0x12, 0x0, 0x5fbce0], [0x5fc6a0, 0x33, 0x16, 0x0, 0x5fc540], [0x5fc4a0, 0x36, 0x16, 0x0, 0x5fc540], [0x5fc160, 0xe, 0x10, 0x0, 0x5fc540], [0x5fbee0, 0x1, 0x24, 0x0, 0x5fbe60], [0x5fc820, 0x2b, 0x11, 0x0, 0x5fbe60], [0x5fbfc0, 0x56, 0x6, 0x0, 0x5fbe60], [0x5fc0a0, 0x2e, 0x8, 0x0, 0x5fbe60], [0x5fc5e0, 0x2f, 0x22, 0x0, 0x5fbe60], [0x5fc380, 0x63, 0x11, 0x0, 0x5fc200], [0x5fc600, 0x4b, 0x32, 0x0, 0x5fc200], [0x5fc080, 0x36, 0x29, 0x0, 0x5fc6a0], [0x5fc800, 0x6, 0x2, 0x0, 0x5fc6a0], [0x5fc500, 0x1e, 0x22, 0x0, 0x5fc160], [0x5fc460, 0x38, 0x21, 0x0, 0x5fc160], [0x5fc8c0, 0x4f, 0xb, 0x0, 0x5fc160], [0x5fc180, 0x2c, 0x17, 0x0, 0x5fc160], [0x5fbf00, 0x1a, 0x2b, 0x0, 0x5fbee0], [0x5fc2a0, 0x19, 0x1, 0x0, 0x5fbee0], [0x5fbfe0, 0x52, 0x30, 0x0, 0x5fbee0], [0x5fc560, 0x4, 0x2, 0x0, 0x5fbfc0], [0x5fc760, 0x10, 0x3, 0x0, 0x5fbfc0], [0x5fc120, 0x5c, 0xf, 0x0, 0x5fbfc0], [0x5fc0c0, 0x52, 0x20, 0x0, 0x5fc0a0], [0x5fc3c0, 0x36, 0x8, 0x0, 0x5fc0a0], [0x5fbd20, 0x47, 0x30, 0x0, 0x5fc0a0], [0x5fc6e0, 0x62, 0x2c, 0x0, 0x5fc080], [0x5fbe20, 0x47, 0x2, 0x0, 0x5fc800], [0x5fbf60, 0x31, 0x8, 0x0, 0x5fc800], [0x5fc920, 0x13, 0x1d, 0x0, 0x5fc800], [0x5fc4e0, 0xf, 0x1d, 0x0, 0x5fc800], [0x5fbd00, 0x3d, 0x32, 0x0, 0x5fc800], [0x5fc580, 0x64, 0x5, 0x0, 0x5fc500], [0x5fc700, 0x41, 0x16, 0x0, 0x5fc460], [0x5fc1a0, 0xd, 0x14, 0x0, 0x5fc180], [0x5fbf20, 0xe, 0x1b, 0x0, 0x5fbf00], [0x5fc860, 0x48, 0x1c, 0x0, 0x5fbf00], [0x5fc240, 0x2e, 0x2d, 0x0, 0x5fbf00], [0x5fc3a0, 0x47, 0xd, 0x0, 0x5fc2a0], [0x5fc620, 0x3b, 0x27, 0x0, 0x5fc2a0], [0x5fc000, 0x54, 0x11, 0x0, 0x5fbfe0], [0x5fc280, 0x1a, 0x4, 0x0, 0x5fc120], [0x5fc260, 0xb, 0x22, 0x0, 0x5fc0c0], [0x5fc780, 0x13, 0x11, 0x0, 0x5fc0c0], [0x5fc0e0, 0x4a, 0x28, 0x0, 0x5fc0c0], [0x5fc400, 0x24, 0xb, 0x0, 0x5fc3c0], [0x5fc440, 0x4f, 0x20, 0x0, 0x5fbe20], [0x5fbe40, 0x2d, 0x32, 0x0, 0x5fbe20], [0x5fc720, 0x51, 0x15, 0x0, 0x5fbf60], [0x5fc420, 0x7, 0x11, 0x0, 0x5fbf60], [0x5fc6c0, 0x36, 0x1c, 0x0, 0x5fbf60], [0x5fbf80, 0x3b, 0x1c, 0x0, 0x5fbf60], [0x5fbd80, 0x63, 0x6, 0x0, 0x5fbd00], [0x5fc480, 0x4, 0x1a, 0x0, 0x5fbd00], [0x5fbd40, 0x10, 0x19, 0x0, 0x5fbd00], [0x5fc680, 0x23, 0x3, 0x0, 0x5fbd00], [0x5fc1c0, 0x28, 0x24, 0x0, 0x5fc1a0], [0x5fc220, 0x23, 0x13, 0x0, 0x5fc1a0], [0x5fbf40, 0x13, 0xd, 0x0, 0x5fbf20], [0x5fc880, 0x55, 0x22, 0x0, 0x5fc860], [0x5fc840, 0x12, 0x4, 0x0, 0x5fc240], [0x5fc640, 0x1f, 0x2b, 0x0, 0x5fc620], [0x5fc2c0, 0x8, 0x2b, 0x0, 0x5fc000], [0x5fc3e0, 0x1d, 0x16, 0x0, 0x5fc280], [0x5fc7a0, 0x14, 0x15, 0x0, 0x5fc780], [0x5fc100, 0xc, 0x7, 0x0, 0x5fc0e0], [0x5fbe80, 0x49, 0x29, 0x0, 0x5fbe40], [0x5fc7c0, 0x9, 0x22, 0x0, 0x5fc420], [0x5fbfa0, 0x64, 0x24, 0x0, 0x5fbf80], [0x5fc340, 0x56, 0x27, 0x0, 0x5fbf80], [0x5fbe00, 0x18, 0x29, 0x0, 0x5fbd80], [0x5fbda0, 0x18, 0x1b, 0x0, 0x5fbd80], [0x5fc020, 0x13, 0x10, 0x0, 0x5fbd80], [0x5fbd60, 0x54, 0x1c, 0x0, 0x5fbd40], [0x5fc520, 0xa, 0x14, 0x0, 0x5fbd40], [0x5fc5c0, 0x63, 0x25, 0x0, 0x5fc1c0], [0x5fc8a0, 0x61, 0x8, 0x0, 0x5fc880], [0x5fc2e0, 0x31, 0x25, 0x0, 0x5fc2c0], [0x5fc140, 0x16, 0xa, 0x0, 0x5fc100], [0x5fc5a0, 0x5d, 0x2e, 0x0, 0x5fc100], [0x5fc1e0, 0x63, 0x5, 0x0, 0x5fbe80], [0x5fc7e0, 0x2d, 0x2c, 0x0, 0x5fc7c0], [0x5fc360, 0x56, 0x3, 0x0, 0x5fc340], [0x5fc900, 0x40, 0x18, 0x0, 0x5fbe00], [0x5fc660, 0x5b, 0xb, 0x0, 0x5fbda0], [0x5fbea0, 0x56, 0xc, 0x0, 0x5fbda0], [0x5fbdc0, 0x42, 0x19, 0x0, 0x5fbda0], [0x5fc040, 0x3b, 0xf, 0x0, 0x5fc020], [0x5fc740, 0x13, 0x2a, 0x0, 0x5fbd60], [0x5fc300, 0xb, 0x87, 0x0, 0x5fc2e0], [0x5fbec0, 0x46, 0x21, 0x0, 0x5fbea0], [0x5fbde0, 0x3a, 0x22, 0x0, 0x5fbdc0], [0x5fc940, 0x25, 0xe, 0x0, 0x5fc040], [0x5fc060, 0x52, 0x1, 0x0, 0x5fc040], [0x5fc4c0, 0x18e, 0x44, 0x0, 0x5fc300], [0x5fc320, 0x1e0, 0x37, 0x0, 0x5fc300]]

def has_visited(graph, path, cur):
    prev = graph[cur][4]
    for i in range(len(path)):
        if graph[path[i]][0] == prev:
            return True
    return False

def get_sum(graph, path):
    arr = [0, 0]
    for i in path:
        arr = [arr[0] + graph[i][1], arr[1] + graph[i][2]]
    return arr

def dfs(graph, idx, path):
    for i in range(idx + 1, len(graph)):
        for j in range(idx + 1, len(graph)):
            if has_visited(graph, path, j) and (get_sum(graph, path)[1] + graph[j][2]) <= 233:
                dfs(graph, j, path + [j])
        r = get_sum(graph, path)
        if r[0] >= 1050 and r[1] <= 233:
            print path, r
            print base64_encode(''.join(chr(sbox[c]) for c in path))
        return

dfs(table, 0, [0])