import struct
import ctypes

# for ida script
'''
def decode_inst(ea):
    ins = Dword(ea)
    ins = (ins ^ (ea ** 3)) & 2**32-1
    PatchDword(ea, ins)
'''

# arm_code = [0xa7, 0xaa, 0xa, 0x4b, 0x55, 0x55, 0x55, 0x40, 0xaa, 0xe2, 0x87, 0x43, 0xa7, 0x1a, 0xa, 0x4b, 0xba, 0x7a, 0xe7, 0x48, 0x9a, 0xba, 0x35, 0x4f, 0xae, 0x9a, 0x27, 0x48, 0xab, 0xba, 0x35, 0x4d, 0xa2, 0xba, 0x27, 0x4f, 0x8e, 0xba, 0x35, 0x4f, 0xab, 0xba, 0x35, 0x4d, 0xae, 0xba, 0x27, 0x4f, 0xb6, 0xba, 0x35, 0x4f, 0xab, 0xba, 0x35, 0x4d, 0xa6, 0xba, 0x27, 0x4f, 0xaa, 0xba, 0xa, 0x49, 0xba, 0x8a, 0x35, 0x4f, 0xa8, 0x8a, 0x35, 0x4d, 0x61, 0x55, 0x55, 0x41, 0x4a, 0x92, 0xaa, 0xaa, 0x72, 0x92, 0xaa, 0xaa, 0x7a, 0x92, 0xaa, 0xaa, 0x6e, 0x92, 0xaa, 0xaa, 0xaa, 0xaa, 0xfa, 0x49, 0xb4, 0x55, 0x85, 0xab, 0xba, 0x55, 0x85, 0x4b, 0xaa, 0xba, 0xa, 0x4b, 0xa6, 0xaa, 0x35, 0x4f, 0xa6, 0x8a, 0x35, 0x4f, 0xaa, 0xaa, 0x25, 0x4a, 0xa8, 0x8a, 0x25, 0x4a, 0x6b, 0x55, 0x55, 0x40, 0x4a, 0x55, 0x55, 0x55, 0x4e, 0x92, 0xaa, 0xaa, 0xaa, 0xe0, 0x76, 0x27, 0x6a, 0xb6, 0x4e, 0x35, 0xb4, 0xe5, 0xcb, 0x38, 0xaa, 0xaa, 0x27, 0x4f, 0xab, 0x34, 0x21, 0x31, 0x6a, 0x31, 0x34, 0x3f, 0xb4, 0x55, 0x91, 0x36, 0x54, 0x74, 0x55, 0x4d, 0xa8, 0x28, 0xc, 0xcb, 0x6a, 0x28, 0x2e, 0xc1, 0xb4, 0x85, 0x81, 0xcc, 0x54, 0x74, 0x55, 0x4d, 0xaa, 0x44, 0x8a, 0xcf, 0x67, 0x2b, 0x9c, 0xc5, 0x82, 0xfa, 0xc6, 0xd9, 0xa6, 0x9, 0x9a, 0xdc, 0xa9, 0xf0, 0x65, 0xdc, 0x6e, 0xa2, 0x75, 0xd7, 0xa2, 0xca, 0xcb, 0xd4, 0xe6, 0x2b, 0xa2, 0xd1, 0xaa, 0x34, 0xa6, 0xef, 0x6b, 0xcd, 0xc4, 0xea, 0xaa, 0xaa, 0x4a, 0x15, 0xa3, 0xc2, 0x2e, 0xe8, 0x86, 0x9, 0x1e, 0xe4, 0x6a, 0x4, 0xf0, 0xe7, 0xa2, 0x2a, 0x33, 0xff, 0xde, 0xcc, 0x7, 0xfc, 0xa8, 0x5c, 0xc1, 0xff, 0x6b, 0x86, 0xa2, 0xf5, 0xa6, 0xa, 0xe3, 0xf4, 0xc2, 0x5, 0x38, 0xf1, 0xa9, 0x0, 0xee, 0x8a, 0x68, 0xff, 0xa5, 0x89, 0xaa, 0x8a, 0x78, 0x89, 0xe6, 0x77, 0xa7, 0x86, 0xae, 0xc4, 0x51, 0x84, 0x68, 0x19, 0x57, 0x85, 0xa6, 0xaa, 0x5b, 0x9e, 0xc3, 0x9e, 0xe4, 0x64, 0xaa, 0xf8, 0x69, 0x9e, 0x7a, 0xf0, 0x5a, 0x96, 0xab, 0xfa, 0x7c, 0x95, 0xfe, 0x99, 0x93, 0x90, 0xbe, 0xac, 0xa2, 0xad, 0x6e, 0x73, 0xc9, 0xaa, 0xab, 0x2a, 0xa5, 0xa3, 0xf6, 0x80, 0xe3, 0x8b, 0x7e, 0x60, 0x0, 0xa1, 0x6a, 0xca, 0x0, 0xbb, 0xba, 0x4a, 0xa6, 0xbb, 0xfe, 0xf3, 0x3a, 0xb8, 0x72, 0x64, 0x30, 0xb5, 0x69, 0xe5, 0x24, 0xb7, 0xa8, 0x8b, 0x29, 0x4a, 0xea, 0xa, 0x39, 0x4c, 0xa8, 0xa8, 0xfd, 0x4d, 0x62, 0x2c, 0x2a, 0x46, 0xae, 0xba, 0xb2, 0x7c, 0x5a, 0x35, 0x10, 0x40, 0xaa, 0x9c, 0x13, 0x58, 0x6a, 0x6f, 0xe3, 0x5c, 0xaa, 0x3a, 0x4a, 0x57, 0xcb, 0x9c, 0xd0, 0x5b, 0x32, 0x50, 0xa3, 0x51, 0x6a, 0x66, 0x93, 0x6b, 0xbe, 0xa, 0xee, 0x6b, 0x4a, 0x2f, 0xca, 0x68, 0xa8, 0x24, 0xd, 0x61, 0x6b, 0x70, 0x7c, 0x64, 0xaa, 0xba, 0xbf, 0x7e, 0xfa, 0xf6, 0x17, 0x7b, 0xae, 0x18, 0xcc, 0x78, 0x7e, 0x98, 0x13, 0x74, 0xab, 0x7a, 0x75, 0x76, 0xfe, 0x21, 0xb9, 0xe, 0x74, 0x33, 0xb5, 0x4, 0x36, 0xcb, 0x10, 0x7, 0xaa, 0x2a, 0x48, 0x1, 0xeb, 0x78, 0x12, 0x7, 0xaa, 0x90, 0x2d, 0x1d, 0x65, 0x12, 0xf2, 0x15, 0xa2, 0xda, 0x1c, 0x17, 0xeb, 0xfb, 0x2f, 0x14, 0xba, 0xf4, 0x47, 0x10, 0x7a, 0x3d, 0x89, 0x2d, 0xba, 0xbd, 0x88, 0x2f, 0xeb, 0x32, 0x7e, 0x22, 0xa2, 0xc8, 0x46, 0xc, 0x6e, 0xf4, 0xe6, 0x3f, 0xba, 0x2a, 0xf2, 0x3c, 0xe6, 0x7d, 0x87, 0x38, 0xab, 0x1c, 0x83, 0x32, 0xc7, 0x38, 0x76, 0x3f, 0xba, 0x2a, 0xa9, 0xce, 0xeb, 0x64, 0x36, 0xcd, 0xba, 0xf0, 0xb9, 0xc7, 0x98, 0x71, 0x76, 0xcc, 0xa1, 0x4a, 0xa1, 0xc4, 0xea, 0x5f, 0x21, 0xd1, 0x46, 0xd8, 0xab, 0xaa, 0xd6, 0x7f, 0xaa, 0xaa, 0x5e, 0xdb, 0xab, 0xaa, 0xb6, 0x7f, 0xaa, 0xaa, 0x76, 0x7e, 0xaa, 0xaa, 0x96, 0xd8, 0xab, 0xaa, 0xc2, 0x92, 0xaa, 0xaa, 0xca, 0x7f, 0xaa, 0xaa, 0xa6, 0x7f, 0xaa, 0xaa, 0x7a, 0x7e, 0xaa, 0xaa, 0xaa, 0x62, 0x8c, 0xf8, 0xe7, 0x40, 0xb4, 0xf5, 0x8a, 0xf0, 0x93, 0x8a, 0x2a, 0xbb, 0x1b, 0x89, 0xaa, 0x5a, 0xcf, 0x83, 0xea, 0x93, 0x1, 0x84, 0xae, 0x4, 0xcf, 0x9e, 0x28, 0x12, 0x9d, 0x9c, 0xfb, 0xaa, 0xaa, 0x98, 0xce, 0x1b, 0xf8, 0x93, 0xaa, 0x68, 0xbb, 0xaa, 0x28, 0x8b, 0xdb, 0xad, 0xe7, 0xba, 0xe1, 0xa9, 0xfa, 0xe4, 0x13, 0xa3, 0xaa, 0x5c, 0x21, 0xba, 0x7b, 0xbf, 0x4d, 0xba, 0xe3, 0x2a, 0x66, 0xb6, 0x16, 0xcc, 0x80, 0xb4, 0xaa, 0x10, 0x84, 0xb5, 0x60, 0xc6, 0x3b, 0x4a, 0xef, 0x1a, 0x2e, 0x46, 0x2, 0xff, 0x4e, 0x44, 0xd0, 0x3b, 0x20, 0x4e, 0xb6, 0x51, 0x47, 0x5c, 0xaa, 0xaa, 0x51, 0x5d, 0xea, 0xc6, 0xd2, 0x52, 0xaa, 0xc8, 0xaa, 0x50, 0x6b, 0x48, 0x21, 0x6a, 0xa2, 0x7a, 0x3b, 0x68, 0xe2, 0x91, 0x1c, 0x64, 0xa0, 0x8c, 0x39, 0x66, 0x64, 0x3b, 0x76, 0x53, 0x72, 0x2a, 0xcc, 0x78, 0xea, 0x58, 0x3c, 0x76, 0xa6, 0x40, 0x1a, 0xf, 0x26, 0xc2, 0xcf, 0x5, 0x26, 0xda, 0x3a, 0x9, 0xf5, 0xab, 0x95, 0x4, 0xa2, 0x54, 0x40, 0x1f, 0xaa, 0x7d, 0x13, 0x1a, 0xab, 0xba, 0x45, 0x13, 0xe4, 0x73, 0xb7, 0x17, 0xaa, 0x88, 0xf6, 0x2e, 0x62, 0xa4, 0x90, 0x29, 0xab, 0x3a, 0x42, 0x22, 0xe2, 0xd, 0x12, 0x21, 0x47, 0x3, 0x57, 0x33, 0xfe, 0x37, 0x61, 0x38, 0xa6, 0x2a, 0xb, 0x34, 0xea, 0x54, 0xa9, 0xc9, 0xba, 0xb0, 0x46, 0xcb, 0x7a, 0x7e, 0xf6, 0xc7, 0xa0, 0x9a, 0xdc, 0xc4, 0xfa, 0x87, 0x24, 0x91, 0xd6, 0x64, 0xcc, 0xda, 0x6a, 0xb9, 0x4c, 0xd0, 0xba, 0xba, 0xeb, 0xd1, 0xeb, 0x2e, 0x79, 0xeb, 0xd2, 0x58, 0xf9, 0xe8, 0x68, 0x30, 0x6f, 0xe6, 0xab, 0xeb, 0xe4, 0xfa, 0xea, 0x29, 0x6a, 0xfa, 0xa6, 0xc, 0x6b, 0xf6, 0x7a, 0xb3, 0x50, 0xf1, 0xa9, 0xa, 0xdf, 0x88, 0xea, 0x30, 0xe3, 0x88, 0xa2, 0xe0, 0x4, 0x83, 0x7a, 0x6a, 0x89, 0x9f, 0xab, 0x5a, 0x77, 0x9d, 0xfa, 0x73, 0x27, 0x95, 0x41, 0x2b, 0xf2, 0x9e, 0x66, 0x75, 0xe0, 0xac, 0xaa, 0xba, 0xaa, 0xa1, 0xe0, 0x5a, 0xdb, 0xa3, 0xe4, 0xd7, 0x32, 0xb0, 0x6a, 0x5c, 0x8a, 0xbf, 0xae, 0xba, 0xf9, 0xb5, 0xeb, 0x55, 0x94, 0xb4, 0xa1, 0xcc, 0x69, 0x4f, 0x6a, 0x17, 0x3b, 0x4b, 0xbe, 0xdb, 0xab, 0xaa, 0xc6, 0x9b, 0xdf, 0xc4, 0x9a, 0xdb, 0xab, 0xaa, 0x52, 0xda, 0xab, 0xaa, 0xaa, 0x7e, 0xaa, 0xaa, 0xba, 0x9d, 0xaa, 0xaa, 0xaa, 0xfa, 0xa8, 0xaa, 0xfe, 0xda, 0xab, 0xaa, 0x6, 0xda, 0xab, 0xaa, 0x3a, 0xda, 0xab, 0xaa, 0xee, 0xda, 0xab, 0xaa, 0x7a, 0xe8, 0x5c, 0xb, 0xa6, 0x7a, 0x92, 0x7, 0xe2, 0x51, 0x94, 0x2, 0xa6, 0x4c, 0x82, 0x1d, 0x6e, 0x6b, 0x9c, 0x18, 0xaa, 0x2a, 0x6f, 0x15, 0xea, 0x88, 0xf4, 0x2e, 0xaa, 0x0, 0xd3, 0x29, 0x62, 0xa2, 0xcd, 0x24, 0xab, 0xda, 0xe9, 0x3a, 0xe2, 0x1b, 0x9a, 0x76, 0xae, 0x74, 0x66, 0x34, 0x6a, 0x4d, 0x41, 0xcf, 0xab, 0xaa, 0x8a, 0xcf, 0xea, 0x42, 0x66, 0xc3, 0xaa, 0x58, 0x97, 0xc0, 0x6a, 0x14, 0x5, 0xda, 0xab, 0x3a, 0x41, 0xd2, 0xea, 0xfd, 0x8f, 0xd0, 0x58, 0x43, 0xbc, 0xe4, 0x7a, 0xb7, 0xa, 0xe2, 0xb4, 0xd5, 0xf3, 0xe4, 0xea, 0xcc, 0x44, 0xf7, 0xa7, 0xc0, 0x19, 0xf1, 0x7a, 0xfe, 0x8f, 0xf7, 0xab, 0x9a, 0x6b, 0x8d, 0xee, 0x77, 0xbc, 0x85, 0xae, 0x24, 0xcf, 0x80, 0x7a, 0xfe, 0x4b, 0x9d, 0xab, 0xaa, 0xb6, 0x91, 0xfb, 0x6e, 0x12, 0xbf, 0x62, 0x38, 0x1c, 0xaa, 0x6a, 0xc0, 0xbb, 0xa0, 0xae, 0xea, 0xa6, 0xbf, 0x2a, 0xc9, 0xa1, 0xba, 0xa8, 0xcc, 0x30, 0xb1, 0x6a, 0xc3, 0x90, 0x49, 0xab, 0x1b, 0xb, 0x4b, 0xee, 0x0, 0x1, 0x44, 0x1a, 0x80, 0x77, 0x5e, 0x68, 0xfa, 0xf2, 0x5c, 0xab, 0x4b, 0x58, 0x56, 0xea, 0x3, 0xa4, 0x6b, 0xaa, 0xb4, 0x9b, 0x68, 0x6e, 0xa5, 0x71, 0x62, 0xae, 0xaa, 0xb1, 0x7c, 0xeb, 0xba, 0x84, 0x70, 0xae, 0xe8, 0xc1, 0x71, 0x83, 0xc3, 0x43, 0x4, 0xd2, 0xba, 0xe4, 0x6, 0xea, 0x5, 0xaa, 0x5, 0xaa, 0xcc, 0xf8, 0x1c, 0x6a, 0xdf, 0x33, 0x14, 0xab, 0x2a, 0x4e, 0x29, 0xe2, 0x6c, 0x94, 0x29, 0xa2, 0x90, 0xb0, 0x23, 0x7a, 0x61, 0xf6, 0x3b, 0xab, 0x1a, 0xc0, 0x33, 0xf9, 0x1f, 0xb0, 0x1e, 0xfe, 0x44, 0xcb, 0xcc, 0x6a, 0xf1, 0xc2, 0xc3, 0xaa, 0xaa, 0xf3, 0xc0, 0x11, 0x88, 0x91, 0xd4, 0x43, 0xba, 0x19, 0xd2, 0xe1, 0x6, 0x5b, 0xe8, 0xba, 0x84, 0x44, 0xea, 0x24, 0x21, 0xb8, 0xe6, 0x4, 0x13, 0x93, 0xf9, 0x61, 0xbb, 0xc8, 0xf0, 0x3b, 0x24, 0x1b, 0xf5, 0xe2, 0xe8, 0xd3, 0x8a, 0x9e, 0x20, 0xce, 0x84, 0x64, 0x82, 0x33, 0x98, 0xab, 0xcb, 0x12, 0x92, 0xea, 0xcb, 0x71, 0x91, 0xa2, 0x34, 0xb5, 0xab, 0x6b, 0x8d, 0x85, 0xa2, 0xa2, 0xaa, 0xc7, 0xbf, 0xd, 0x7d, 0x40, 0xb7, 0xa1, 0xd8, 0x44, 0xb6, 0x6a, 0x4c, 0x9b, 0x41, 0xea, 0xc5, 0xab, 0xaa, 0x6e, 0x9e, 0xaa, 0xaa, 0x9e, 0x9f, 0xaa, 0xaa, 0x9a, 0x78, 0xaa, 0xaa, 0xbe, 0x9f, 0xaa, 0xaa, 0x3e, 0x9e, 0xaa, 0xaa, 0xaa, 0x78, 0x31, 0x6c, 0x67, 0x2e, 0x1d, 0x7d, 0xb2, 0x4a, 0x9b, 0x74, 0xeb, 0x27, 0x4f, 0xb, 0xae, 0xe4, 0xf2, 0x6, 0x62, 0xd9, 0x64, 0x0, 0xa2, 0xaa, 0x8d, 0x19, 0xfa, 0x49, 0x1e, 0x15, 0xab, 0xf8, 0xcc, 0x28, 0x53, 0xb0, 0x10, 0x9, 0x46, 0xfa, 0x77, 0x3f, 0xea, 0x59, 0xeb, 0x3c, 0xaa, 0xbc, 0xca, 0x34, 0x6a, 0x33, 0xdf, 0xcc, 0xab, 0x2a, 0x25, 0xc3, 0xe6, 0x40, 0xa, 0xde, 0xa6, 0x60, 0xe7, 0xd8, 0x7a, 0x9d, 0xd0, 0xd7, 0xab, 0x5a, 0xd9, 0xee, 0xe6, 0x93, 0x7e, 0xcb, 0x66, 0x54, 0xbd, 0xfd, 0x6a, 0x95, 0x67, 0xf3, 0xa2, 0xba, 0xb1, 0x8f, 0x2e, 0xca, 0xf7, 0x89, 0xa8, 0x88, 0xac, 0x87, 0x6b, 0xfd, 0x7c, 0x9e, 0xaa, 0x9a, 0x8e, 0x92, 0xea, 0xd5, 0xd3, 0xae, 0xae, 0x9c, 0xf6, 0xa7, 0x66, 0x3f, 0x99, 0xa0, 0xab, 0x2a, 0xba, 0xbe, 0xe6, 0x5c, 0x51, 0xb2, 0x44, 0xaf, 0x34, 0x44, 0x6b, 0x26, 0xfb, 0x42, 0xa2, 0x1a, 0x62, 0x5d, 0xe2, 0xcf, 0x9, 0x56, 0xba, 0x13, 0x93, 0x69, 0x6b, 0x21, 0xc7, 0x6c, 0xbd, 0xaa, 0xee, 0x4e, 0xe2, 0xa6, 0x78, 0x7a, 0xba, 0xf, 0xf6, 0x75, 0x6a, 0x58, 0x99, 0x9, 0xa2, 0x6a, 0x3a, 0x5, 0xeb, 0xe1, 0x53, 0x1a, 0xaa, 0xcc, 0x61, 0x58, 0x7a, 0x8b, 0x58, 0x1f, 0xa2, 0x2a, 0xac, 0x28, 0xe2, 0x38, 0x7a, 0x21, 0xab, 0xa0, 0x28, 0x3c, 0xd3, 0x2c, 0xee, 0x3d, 0xfa, 0xda, 0xcc, 0xcc, 0xea, 0xbb, 0x19, 0xc1, 0xaa, 0xf4, 0xb9, 0xdd, 0x6b, 0xfd, 0x35, 0xd0, 0xa8, 0xaa, 0x8a, 0x11, 0xe2, 0xf2, 0xc4, 0xe7, 0xae, 0xc8, 0x6e, 0xe0, 0x6e, 0xb4, 0x84, 0xf7, 0x55, 0xc5, 0xc4, 0xfe, 0xe2, 0x1d, 0xce, 0x8a, 0xab, 0x3c, 0x4c, 0x85, 0x62, 0x87, 0xff, 0x9b, 0x49, 0xd5, 0x1b, 0x9c, 0x15, 0xdb, 0x9c, 0xa3, 0xa2, 0xf0, 0xf8, 0xa4, 0x6b, 0x4e, 0xe7, 0xba, 0xa2, 0x9a, 0xf6, 0xb5, 0x2b, 0x68, 0xb0, 0x41, 0xae, 0xa4, 0xc9, 0x46, 0x61, 0xd9, 0x5, 0x5a, 0xaa, 0x22, 0xbb, 0x5a, 0x2a, 0xc4, 0xab, 0xaa, 0x4a, 0xc7, 0xab, 0xaa, 0xa6, 0x7b, 0xaa, 0xaa, 0xaa, 0x7b, 0xaa, 0xaaL]
# arm_code = [i ^ 0xaa for i in arm_code]
# arm_code = ''.join(chr(i) for i in arm_code)
# decoded_code = '\x00' * 0x6a0

# for i in range(len(arm_code) / 4):
#     ins = struct.unpack("<L", arm_code[i*4:i*4+4])[0]
#     ins = (ins ^ ((i * 4) ** 3)) & 2**32-1
#     decoded_code += struct.pack("<L", ins)

# open("1.bin", "wb").write(decoded_code)

rand_table = []
arr = []
c = 0

def check(i, j, idx):
    global rand_table
    global arr
    global c

    if c == 1:
        return
    arr[idx] = rand_table[j]
    if idx == i:
        tmp = -1
        for k in range(1, i + 1):
            if tmp > arr[k]:
                c = 0
                return
            tmp = arr[k]
        c = 1
        print i, j, arr
    else:
        for k in range(j + 1, 10001):
            check(i, k, idx + 1)

def fast_get_flag():
    global rand_table

    res = 1
    _max = -1
    l = []
    for i in range(1, len(rand_table)):
        if rand_table[i] >= _max:
            l.append(rand_table[i])
            res += 1
            _max = rand_table[i]
    return res

def get_flag():
    global rand_table
    global arr
    global c

    res = 1
    for i in range(1, 10001):
        if i % 100 == 0:
            print i
        arr = [0 for _ in range(1, 10001)]
        c = 0
        for j in range(1, 10001 - i):
            check(i, j, 1)
            if c == 1:
                res = i
                break
    return res

dll = ctypes.CDLL("libc.so.6")
dll.srand(0x6E75316C)
flag = ''

for i in range(10):
    rand_table = ['a'] + [dll.rand() % 11 for _ in range(10000)]
    # flag += chr(get_flag() + 31 & 0xff)
    flag += chr(fast_get_flag() + 31 & 0xff)
    print flag, flag.encode('hex')

print flag, flag.encode('hex')