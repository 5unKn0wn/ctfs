class MersenneTwister:
    def __init__(self):
        self.state = []
        self.index = 0
 
    def seed(self, seed):
        """
        Initialize generator.
 
        :param seed: An integer value to seed the generator with
        """
        self.state = []
        self.index = 0
        self.state.append(seed)
        for i in range(1, 624):
            n = (0x6c078965 * (self.state[i-1] ^ (self.state[i-1] >> 30)) + i)
            n &= 0xffffffff
            self.state.append(n)
 
    def randint(self):
        """
        Extracts a random number.
 
        :rtype: A random integer
        """
        if self.index == 0:
            self.generate()
 
        y = self.state[self.index]
        y ^= y >> 11
        y ^= (y << 7) & 0x9d2c5680
        y ^= (y << 15) & 0xefc60000
        y ^= y >> 18
 
        self.index = (self.index + 1) % 624
        return y
 
    def generate(self):
        """
        Generates 624 random numbers and stores in the state list.
 
        """
        for i in range(624):
            n = self.state[i] & 0x80000000
            n += self.state[(i+1) % 624] & 0x7fffffff
            self.state[i] = self.state[(i+397) % 624] ^ (n >> 1)
            if n % 2 != 0:
                self.state[i] ^= 0x9908b0df

rol = lambda val, r_bits, max_bits: \
    (val << r_bits%max_bits) & (2**max_bits-1) | \
    ((val & (2**max_bits-1)) >> (max_bits-(r_bits%max_bits)))

compare_table = [[0x3F, 0xB1, 0xBF, 0x52, 0x98, 0x88, 0x35, 0x9D, 0x29, 0x3D, 0xA8, 0x49, 0xA2, 0xA8, 0x4B, 0xC3], 
[0xEB, 0x68, 0x26, 0xCE, 0x0D, 0x49, 0xFE, 0x08, 0xCD, 0x25, 0x73, 0x64, 0x4E, 0x78, 0xF5, 0xEA], 
[0x17, 0x56, 0xDD, 0xEE, 0x2F, 0x4C, 0xC6, 0x0B, 0x9C, 0x05, 0x40, 0x8E, 0x77, 0x24, 0xF4, 0x02], 
[0xB7, 0x0C, 0xD2, 0xAD, 0xED, 0x08, 0x18, 0x2A, 0xCA, 0xEE, 0xD4, 0x2A, 0x72, 0xA6, 0x13, 0xC6], 
[0x58, 0xF5, 0x7C, 0x27, 0xAC, 0x81, 0x0F, 0x13, 0xC7, 0x14, 0x4E, 0xA7, 0x8C, 0x51, 0x09, 0x8A], 
[0xDE, 0x02, 0x14, 0x7E, 0x9D, 0x8E, 0xDC, 0x68, 0x22, 0x77, 0x14, 0xC4, 0xF8, 0xC2, 0xC4, 0x66], 
[0xBF, 0x09, 0x23, 0x2F, 0xD2, 0x8D, 0xDD, 0x7F, 0xA0, 0xA3, 0x89, 0x47, 0xE6, 0x04, 0x6B, 0xFC], 
[0x87, 0x32, 0x48, 0x0D, 0xAC, 0x59, 0x9F, 0x0D, 0xDD, 0xCF, 0x2F, 0x60, 0xC3, 0x3D, 0x36, 0xCB], 
[0x23, 0xB6, 0x00, 0x54, 0x91, 0x5A, 0xC5, 0x4A, 0x7C, 0x93, 0xDF, 0xFE, 0xF5, 0x1E, 0x63, 0xD4], 
[0x6E, 0x9D, 0x9B, 0x85, 0x63, 0x44, 0xFC, 0xA3, 0xE3, 0x00, 0xD4, 0x22, 0xB5, 0xDA, 0xDB, 0x7E], 
[0x1D, 0x26, 0x44, 0x5E, 0x12, 0x58, 0x39, 0x84, 0x6A, 0x7B, 0x2C, 0xB3, 0x4C, 0x45, 0x13, 0x1F], 
[0xBB, 0x2D, 0xDF, 0x95, 0xC3, 0xF4, 0x03, 0x7D, 0x6E, 0xB4, 0xB5, 0xCC, 0xB7, 0xEA, 0x0F, 0x59], 
[0xCC, 0xED, 0x6B, 0x40, 0x43, 0x7C, 0x51, 0x79, 0x84, 0x25, 0x9A, 0x4C, 0xC0, 0x78, 0x0A, 0xBF], 
[0xF6, 0x2F, 0x55, 0x8D, 0x99, 0x6A, 0x4B, 0x33, 0xBC, 0xEB, 0x1E, 0x91, 0x6B, 0x52, 0x32, 0x0D], 
[0xFD, 0x8A, 0x7C, 0x94, 0x5F, 0x01, 0x2B, 0xC8, 0xA9, 0xA8, 0xB1, 0xA0, 0x00, 0x20, 0x50, 0x1F], 
[0x6A, 0x6E, 0x2F, 0x46, 0xF6, 0x15, 0x23, 0x94, 0x57, 0xD2, 0x56, 0x9C, 0x9C, 0x4B, 0x51, 0xBD]]

r = MersenneTwister()
r.seed(0xC0FFEE)

_1 = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
_2 = []
_3 = []
_4 = []
_5 = []
_6 = []

_2_cnt = 34 * 2 - 1
_3_cnt = 1000 * 2 - 1
_4_cnt = 1000 * 2 - 1
_5_cnt = 1000 * 3 - 1
_6_cnt = 1000 * 2 - 1

for i in range(16):
    for j in range(16):
        _1[i].append(r.randint() & 0xff)

for i in range(34):
    _2.append(r.randint() & 0xf)
    _2.append(r.randint() & 0xf)

for i in range(1000):
    _3.append(r.randint() & 0xf)
    _3.append(r.randint() & 0xf)

for i in range(1000):
    _4.append(r.randint() & 0xf)
    _4.append(r.randint() & 0x7)

for i in range(1000):
    _5.append(r.randint() & 0xf)
    _5.append(r.randint() & 0xf)
    _5.append(r.randint() & 0xff)

for i in range(1000):
    _6.append(r.randint() & 0xf)
    _6.append(r.randint() & 0xf)

for i in range(999, -1, -1):
    for j in range(15, -1, -1):
        compare_table[j][_6[_6_cnt - 1]], compare_table[j][_6[_6_cnt]] = compare_table[j][_6[_6_cnt]], compare_table[j][_6[_6_cnt - 1]]
    _6_cnt -= 2

for i in range(999, -1, -1):
    for j in range(15, -1, -1):
        compare_table[_5[_5_cnt - 2]][j] ^= _5[_5_cnt]
        compare_table[j][_5[_5_cnt - 1]] ^= _5[_5_cnt]
    _5_cnt -= 3

for i in range(999, -1, -1):
    tmp = 0
    for j in range(16):
        tmp = (tmp << 8) | compare_table[_4[_4_cnt - 1]][j]
    tmp = rol(tmp, _4[_4_cnt], 8 * 16)
    for j in range(15, -1, -1):
        compare_table[_4[_4_cnt - 1]][j] = tmp & 0xff
        tmp >>= 8
    _4_cnt -= 2

for i in range(999, -1, -1):
    for j in range(15, -1, -1):
        compare_table[_3[_3_cnt - 1]][j], compare_table[_3[_3_cnt]][j] = compare_table[_3[_3_cnt]][j], compare_table[_3[_3_cnt - 1]][j]
    _3_cnt -= 2

for i in range(16):
    for j in range(16):
        compare_table[i][j] ^= _1[i][j]

flag = ''
for i in range(34):
    flag += chr(compare_table[_2[_2_cnt - 1]][_2[_2_cnt]])
    _2_cnt -= 2

flag = flag[::-1]
print flag  # SCTF{t1ny_tIny_baremetal_firmware}
